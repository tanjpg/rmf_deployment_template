{{- if .Values.ENABLE_RMF -}}
---
apiVersion: v1
kind: Service
metadata:
  name: rmf-tinyrobot-fleet-adapter
  labels:
    app: rmf-tinyrobot-fleet-adapter
spec:
  selector:
    app: rmf-tinyrobot-fleet-adapter
  ports:
    - protocol: TCP
      port: 8006
      targetPort: 8006
      name: websocket-port
---
apiVersion: v1
kind: Pod
metadata:
  name: rmf-building-map-server
spec:
  restartPolicy: Always
  containers:
    - name: rmf-building-map-server
      image: {{ .Values.global.REGISTRY_RMF | default "localhost" }}/{{ .Values.rmf.RMF_SITE_IMAGE }}:{{ .Values.global.DEPLOYMENT_IMAGE_TAG }}
      imagePullPolicy: IfNotPresent
      env:
        - name: {{ .Values.global.DDS_ENV | quote }}
          value: {{ .Values.global.DDS_CONFIG | quote }}
        - name: ROS_DOMAIN_ID
          value: {{ .Values.global.ROS_DOMAIN_ID | quote }}
        - name: RMW_IMPLEMENTATION
          value: {{ .Values.global.RMW_IMPLEMENTATION | quote }}
        - name: RMF_BUILDING_MAP
          value: {{ .Values.map.RMF_BUILDING_MAP | quote }}
      command: ["/bin/bash"]
      args: 
        - -c
        - >
          /ros_entrypoint.sh
          ros2 run rmf_building_map_tools building_map_server
          $(RMF_BUILDING_MAP)
      volumeMounts:
        - mountPath: {{ .Values.global.DDS_CONFIG_MOUNTPATH | quote }}
          name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
  volumes:
    - name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
      configMap:
        name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rmf-tinyrobot-fleet-adapter
  labels:
    app: rmf-tinyrobot-fleet-adapter
spec:
  selector:
    matchLabels:
      app: rmf-tinyrobot-fleet-adapter
  template:
    metadata:
      labels:
        app: rmf-tinyrobot-fleet-adapter
    spec:
      containers:
        - name: rmf-tinyrobot-fleet-adapter
          image: {{ .Values.global.REGISTRY_RMF | default "localhost" }}/{{ .Values.rmf.RMF_SITE_IMAGE }}:{{ .Values.global.DEPLOYMENT_IMAGE_TAG }}
          imagePullPolicy: IfNotPresent
          env:
            - name: {{ .Values.global.DDS_ENV | quote }}
              value: {{ .Values.global.DDS_CONFIG | quote }}
            - name: ROS_DOMAIN_ID
              value: {{ .Values.global.ROS_DOMAIN_ID | quote }}
            - name: RMW_IMPLEMENTATION
              value: {{ .Values.global.RMW_IMPLEMENTATION | quote }}
            - name: RMF_SERVER_URI
              value: {{ .Values.global.RMF_SERVER_URI | quote }}
            - name: NAV_GRAPH
              value: {{ .Values.adapters.NAV_GRAPH | quote }}
            - name: FLEET_ADAPTER_CONFIG
              value: {{ .Values.adapters.FLEET_ADAPTER_CONFIG | quote }}
          command: ["/bin/bash"]
          args: 
            - -c
            - >
              /ros_entrypoint.sh
              ros2 launch rmf_demos_fleet_adapter fleet_adapter.launch.xml
              use_sim_time:="false"
              nav_graph_file:={{ .Values.adapters.NAV_GRAPH }}
              config_file:={{ .Values.adapters.FLEET_ADAPTER_CONFIG }}
              server_uri:={{ .Values.global.RMF_SERVER_URI }}
          volumeMounts:
            - mountPath: {{ .Values.global.DDS_CONFIG_MOUNTPATH | quote }}
              name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
          ports:
            - containerPort: 8006
              name: websocket-port
              protocol: TCP
          volumeMounts:
            - mountPath: {{ .Values.global.DDS_CONFIG_MOUNTPATH | quote }}
              name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
            - mountPath: /etc/config
              name: jwt-pub-key
              readOnly: true
      volumes:
        - name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
          configMap:
            name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
        - name: jwt-pub-key
          configMap:
            name: jwt-pub-key
      tolerations:
        - key: reserved
          operator: Equal
          value: rmf
          effect: NoSchedule
---
apiVersion: v1
kind: Pod
metadata:
  name: rmf-mutex-group-supervisor
spec:
  restartPolicy: Always
  containers:
    - name: rmf-mutex-group-supervisor
      image: {{ .Values.global.REGISTRY_RMF | default "localhost" }}/{{ .Values.rmf.RMF_SITE_IMAGE }}:{{ .Values.global.DEPLOYMENT_IMAGE_TAG }}
      imagePullPolicy: IfNotPresent
      env:
        - name: {{ .Values.global.DDS_ENV | quote }}
          value: {{ .Values.global.DDS_CONFIG | quote }}
        - name: ROS_DOMAIN_ID
          value: {{ .Values.global.ROS_DOMAIN_ID | quote }}
        - name: RMW_IMPLEMENTATION
          value: {{ .Values.global.RMW_IMPLEMENTATION | quote }}
      command: ["/bin/bash"]
      args:
        - -c
        - >
          /ros_entrypoint.sh
          ros2 run rmf_fleet_adapter mutex_group_supervisor
      volumeMounts:
        - mountPath: {{ .Values.global.DDS_CONFIG_MOUNTPATH | quote }}
          name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
  volumes:
    - name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
      configMap:
        name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rmf-tinyrobot-fleet-adapter
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    cert-manager.io/cluster-issuer: {{ .Values.CERT_MANAGER_ISSUER }}
spec:
  ingressClassName: nginx
  rules:
    - host: {{ .Values.hostName | quote }}
      http:
        paths:
          - path: /tinyrobot
            pathType: Prefix
            backend:
              service:
                name: rmf-tinyrobot-fleet-adapter
                port:
                  number: 8006
  tls:
    - hosts:
        - {{ .Values.hostName | quote }}
      secretName: rmf-tinyrobot-fleet-adapter-ingress-tls
{{- end -}}
